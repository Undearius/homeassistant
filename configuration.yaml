# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

homeassistant:
  customize: !include customize.yaml
# Uncomment this if you are using SSL/TLS, running in Docker container, etc.
# http:
#   base_url: example.duckdns.org:8123

# Text to speech
tts:
  - platform: google_translate

wake_on_lan:

logger:
  default: error
  logs:
    homeassistant.core: fatal

light:
  - platform: template
    lights:
      alistair_main_ir:
        friendly_name: 'Alistair Main Infrared'
        unique_id: AlistairMainInfrared
        icon_template: mdi:lightbulb-outline
        value_template:  >-
          {% if states('input_number.alistair_main_ir') | int > 0 %}
            on
          {% else %}
            off
          {% endif %}
        level_template: "{{ states('input_number.alistair_main_ir') | int }}"
        turn_on:
          service: input_number.set_value
          data_template:
            entity_id: input_number.alistair_main_ir
            value: 255
        turn_off:
          service: input_number.set_value
          data_template:
            entity_id: input_number.alistair_main_ir
            value: 0
        set_level:
          service: input_number.set_value
          data_template:
            entity_id: input_number.alistair_main_ir
            value: "{{ brightness | int }}"
      rowan_main_ir:
        friendly_name: 'Rowan Main Infrared'
        unique_id: RowanMainInfrared
        icon_template: mdi:lightbulb-outline
        value_template:  >-
          {% if states('input_number.rowan_main_ir') | int > 0 %}
            on
          {% else %}
            off
          {% endif %}
        level_template: "{{ states('input_number.rowan_main_ir') | int }}"
        turn_on:
          service: input_number.set_value
          data_template:
            entity_id: input_number.rowan_main_ir
            value: 255
        turn_off:
          service: input_number.set_value
          data_template:
            entity_id: input_number.rowan_main_ir
            value: 0
        set_level:
          service: input_number.set_value
          data_template:
            entity_id: input_number.rowan_main_ir
            value: "{{ brightness | int }}"

template:
  - sensor:
      - name: Weighted Temp
        unique_id: WeightedTemp
        unit_of_measurement: "Â°C"
        state: >
          {% set thermo = states("sensor.thermostat_temperature") | float(0) %}
          {% set alistair = states("sensor.alistair_temperature") | float(0) %}
          {% set rowan = states("sensor.rowan_temperature") | float(0) %}
          {% set weight = {"thermo": 1.00, "rowan": 0.00, "alistair": 0.00} %}
          {% set alistair_sleeping = is_state('light.alistair_main_ir', 'on') %}
          {% set rowan_sleeping = is_state('light.rowan_main_ir', 'on') %}

          {%- if alistair_sleeping  -%}
            {%- set weight = {"thermo": 0.70, "rowan": 0.00, "alistair": 0.30} %}
          {%- endif %}
          {#
          {%- if rowan_sleeping  -%}
            {%- set weight = {"thermo": 0.70, "rowan": 0.30, "alistair": 0.00} %}
          {%- endif %}

          {%- if alistair_sleeping and rowan_sleeping  -%}
            {%- set weight = {"thermo": 0.50, "rowan": 0.25, "alistair": 0.25} %}
          {%- endif %}
          #}       
          {% set sensors = [
            [thermo, weight.thermo],
            [alistair, weight.alistair],
            [rowan, weight.rowan]
          ] %}

          {# This calculates the weighted average only if the value of the sensor is above 0 #}
          {% set wAvg = namespace(x=0,y=0) %}     
          {% for sensor in sensors if sensor[0] > 0 %}
            {# Sets the output value to the only active sensor #}
            {% if loop.length == 1 %}
              {% set wAvg.x = sensor[0] %}
            {% else %}
              {% set wAvg.x = sensor[0] * sensor[1] + wAvg.x %}
              {% set wAvg.y = sensor[1] + wAvg.y %}
              {% if loop.last %}
                {% set wAvg.x = wAvg.x / wAvg.y %}
              {% endif %}
            {% endif %}
          {% endfor %}

          {{ wAvg.x | round(1) }}
  - sensor:
      - name: Pots brightness
        unique_id: PotsBrightness
        unit_of_measurement: "%"
        state: >
          {% if is_state("light.livingroom_pots", "on") -%}
            {{ (state_attr("light.livingroom_pots", "brightness") / 2.55 ) | round }}
          {%- else -%}
            {% if now().hour >=22 or now().hour < 8 %} 1
            {% elif now().hour >= 20 and now().hour < 22 %} 20
            {% else %} 100
            {% endif %}
          {%- endif %}
  - sensor:
      - name: Phase A Amps
        unique_id: phaseaamps
        unit_of_measurement: "A"
        state_class: measurement
        state: >
          {{ states('sensor.phase_a_power') | float / states('sensor.phase_a_voltage') | float }}
  - sensor:
      - name: Phase B Amps
        unique_id: phasebamps
        unit_of_measurement: "A"
        state_class: measurement
        state: >
          {{ states('sensor.phase_b_power') | float / states('sensor.phase_b_voltage') | float }}
  - sensor:
      - name: Hydro Ottawa Cost
        unique_id: HydroOttawaCost
        unit_of_measurement: "CAD/kWh"
        state: >
          {% set prices = {
            "tier1": 0.087,
            "tier2": 0.103,
            "off_peak": 0.074,
            "mid_peak": 0.102,
            "on_peak": 0.151,
          } %}

          {% if "on" == "on" %}
            {% if now().month in range(5,11) %}
              {% if states('sensor.monthly_energy') | float / 1000 < 600 %}
                {{ prices.tier1 }}
              {% else %}
                {{ prices.tier2 }}
              {% endif %}
            {% else %}
              {% if states('sensor.monthly_energy') | float / 1000 < 1000 %}
                {{ prices.tier1 }}
              {% else %}
                {{ prices.tier2 }}
              {% endif %}
            {% endif %}
          {% else %}
            {% if states.binary_sensor.workday_sensor.state == "off" %}
              {{ prices.off_peak }} 
            {% else %}
                {% if now().month in range(5,11) %}
                {% if now().hour in range(11,17) %} {{ prices.on_peak }}
                {% elif now().hour in [ 7,8,9,10,17,18 ] %} {{ prices.mid_peak }}
                {% else %} {{ prices.off_peak }}
                {% endif %}
              {% else %}
                {% if now().hour in range(11,17) %} {{ prices.mid_peak }}
                {% elif now().hour in [ 7,8,9,10,17,18 ] %} {{ prices.on_peak }}
                {% else %} {{ prices.off_peak }}
                {% endif %}
              {% endif %}
            {% endif %}
          {% endif %}
  - sensor:
      - name: Cyberpower Power
        unique_id: CyberpowerPower
        unit_of_measurement: "W"
        device_class: power
        state: >
          {{ ((states('sensor.cyberpower_load')|int / 100) * states('sensor.cyberpower_nominal_real_power')|int) }}

automation: !include automations.yaml
group: !include groups.yaml
recorder: !include recorder.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
sensor: !include sensors.yaml
