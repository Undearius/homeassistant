# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

homeassistant:
#  latitude: !secret lat
#  longitude: !secret lon
#  elevation: 100
#  unit_system: metric
#  time_zone: America/Toronto
#  name: Home
  customize: !include customize.yaml
# Uncomment this if you are using SSL/TLS, running in Docker container, etc.
# http:
#   base_url: example.duckdns.org:8123

# Text to speech
tts:
  - platform: google_translate

logger:
  default: error
  logs:
    homeassistant.core: fatal

binary_sensor:
  - platform: workday
    country: CA
    province: 'ON'
    #add_holidays: #Hydro Ottawa off-peak holidays 2021
    # - "New Year’s Day"
    # - "Family Day"
    # - "Good Friday"
    # - "Victoria Day"
    # - "Canada Day"
    # - "Civic Holiday"
    # - "Labour Day"
    # - "Thanksgiving"
    # - "Christmas Day"
    # - "Boxing Day"
    #remove_holidays:

light:
  - platform: template
    lights:
      alistair_main_ir:
        friendly_name: 'Alistair Main Infrared'
        unique_id: AlistairMainInfrared
        icon_template: mdi:lightbulb-outline
        value_template:  >-
          {% if states('input_number.alistair_main_ir') | int > 0 %}
            on
          {% else %}
            off
          {% endif %}
        level_template: "{{ states('input_number.alistair_main_ir') | int }}"
        turn_on:
          service: input_number.set_value
          data_template:
            entity_id: input_number.alistair_main_ir
            value: 255
        turn_off:
          service: input_number.set_value
          data_template:
            entity_id: input_number.alistair_main_ir
            value: 0
        set_level:
          service: input_number.set_value
          data_template:
            entity_id: input_number.alistair_main_ir
            value: "{{ brightness | int }}"
  - platform: group
    name: Bedroom Lights
    unique_id: BedroomLights
    entities:
      - light.bedroom_d
      - light.bedroom_w
      - light.wled_bed
  - platform: group
    name: Bedroom Main
    unique_id: BedroomMain
    entities:
      - light.bedroom_d
      - light.bedroom_w

template:
  - sensor:
      - name: Weighted Temp
        unique_id: WeightedTemp
        unit_of_measurement: "°C"
        state: >
          {#
          {% set thermo = states("sensor.thermostat_temperature") | float %}
          {% set alistair = states("sensor.alistair_room_air_temperature") | float %}
          {% set kyle = states("sensor.kyle_office_temperature") | float %}
          {% set weight = {"thermo": 0.00, "kyle": 1.00, "alistair": 0.00} %}
          {% set weight = {"thermo": 1.00, "kyle": 0.00, "alistair": 0.00} %}
          {% set weight = {"thermo": 0.30, "kyle": 0.30, "alistair": 0.40} %}
          {% set weight = {"thermo": 0.01, "kyle": 0.01, "alistair": 0.98} %}
          {% set perc_diff = 0.5 | float %} {#Needs to be between 0 and 1
          {% set weight = {
            "thermo": weight.thermo + (1 - weight.thermo) * perc_diff,
            "kyle": weight.kyle - weight.kyle * perc_diff,
            "alistair": weight.alistair - weight.alistair * perc_diff
          } %}
          {{ (thermo*weight.thermo + kyle*weight.kyle + alistair*weight.alistair) | round(1) }}
          #}
          {{ states("sensor.thermostat_temperature") | float }}
  - sensor:
      - name: Hydro Ottawa Cost
        unique_id: HydroOttawaCost
        unit_of_measurement: "CAD/kWh"
        state: >
          {% set prices = {
            "tier1": 0.098,
            "tier2": 0.115,
            "off_peak": 0.082,
            "mid_peak": 0.113,
            "on_peak": 0.17,
          } %}

          {% if "on" == "on" %}
            {{ prices.tier1 }}
          {% else %}
            {% if states.binary_sensor.workday_sensor.state == "off" %}
              {{ prices.off_peak }}
            {% else %}
                {% if now().month in range(5,11) %}
                {% if now().hour in range(11,17) %} {{ prices.on_peak }}
                {% elif now().hour in [ 7,8,9,10,17,18 ] %} {{ prices.mid_peak }}
                {% else %} {{ prices.off_peak }}
                {% endif %}
              {% else %}
                {% if now().hour in range(11,17) %} {{ prices.mid_peak }}
                {% elif now().hour in [ 7,8,9,10,17,18 ] %} {{ prices.on_peak }}
                {% else %} {{ prices.off_peak }}
                {% endif %}
              {% endif %}
            {% endif %}
          {% endif %}

automation: !include automations.yaml
group: !include groups.yaml
recorder: !include recorder.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
sensor: !include sensors.yaml
